{"version":3,"sources":["components/PhoneBook/PhoneBook.module.css","App.module.css","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","redux/actions.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/PhoneBook/PhoneBook.js","components/Filter/Filter.js","App.js","redux/reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","nanoid","deleteContact","changeFilter","value","ContactForm","state","loginInputNameId","loginInputNamberId","hendleInputChange","event","currentTarget","setState","handleSubmit","preventDefault","props","items","some","contact","alert","onSubmit","reset","this","className","style","formContact","htmlFor","formNameTitle","formNameInput","type","pattern","title","required","onChange","button","Component","connect","contacts","dispatch","actions","ContactList","children","s","list","getCurrentContacts","allContacts","filter","regExp","RegExp","test","contactsItems","onDeleteContact","map","item","itemName","onClick","target","length","PhoneBook","subTitle","createReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.5e8a8252.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"PhoneBook_item__1rvNf\",\"itemName\":\"PhoneBook_itemName__s2SuA\",\"button\":\"PhoneBook_button__3abYs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"App_section__BVbGa\",\"title\":\"App_title__2RP4J\",\"subTitle\":\"App_subTitle__2jhrj\",\"formFilter\":\"App_formFilter__1l4xF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formNameTitle\":\"Filter_formNameTitle__1a94C\",\"formNameInput\":\"Filter_formNameInput__1ybgt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2RAVb\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport { nanoid } from 'nanoid';\r\n\r\nexport const addContact = createAction(\r\n  'contacts/addContact',\r\n  ({ name, number }) => ({\r\n    payload: {\r\n      id: nanoid(),\r\n      name,\r\n      number,\r\n    },\r\n  }),\r\n);\r\n\r\nexport const deleteContact = createAction(\r\n  'contacts/deleteContact',\r\n  id => ({\r\n    payload: id,\r\n  })\r\n);\r\n\r\nexport const changeFilter = createAction(\r\n  'contacts/changeFilter',\r\n  value => ({\r\n    payload: value,\r\n  })\r\n);\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux/actions';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport style from '../ContactForm/ContactForm.module.css'\n\nclass ContactForm extends Component {\n  static propTypes = {\n    name: PropTypes.string,\n    number: PropTypes.string,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  loginInputNameId = nanoid();\n  loginInputNamberId = nanoid();\n\n  hendleInputChange = event => {\n    const { name, value } = event.currentTarget;\n\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const addInputValue = contact =>\n      contact.name === this.state.name || contact.number === this.state.number;\n\n    if (this.props.items.some(addInputValue)) {\n      alert(`Contact is already in contacts`);\n      return;\n    }\n\n    this.props.onSubmit({ ...this.state })\n    this.reset()\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' })\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit} className={style.formContact}>\n        <label htmlFor={this.loginInputNameId} className={style.formNameTitle}>\n          Name\n          <input\n            className={style.formNameInput}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            id={this.loginInputNameId}\n            value={name}\n            onChange={this.hendleInputChange}\n\n          />\n        </label>\n\n        <label htmlFor={this.loginInputNamberId} className={style.formNameTitle}>\n          Number\n          <input\n            className={style.formNameInput}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            id={this.loginInputNamberId}\n            value={number}\n            onChange={this.hendleInputChange}\n          />\n        </label>\n\n        <button type=\"submit\" className={style.button}>Add contact</button>\n      </form>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  items: state.contacts.items,\n});\n\nconst mapDispatchFromProps = dispatch => ({\n  onSubmit: ({ name, number }) =>\n    dispatch(actions.addContact({ name, number })),\n});\n\nexport default connect(mapStateToProps, mapDispatchFromProps)(ContactForm);","import PropTypes from 'prop-types';\nimport s from '../ContactList/ContactList.module.css'\n\nconst ContactList = ({ children }) => (\n  <ul className={s.list}>{children}</ul>\n);\n\nContactList.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default ContactList;","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux/actions';\nimport s from './PhoneBook.module.css';\n\nconst ContactItem = ({ onDeleteContact, contactsItems }) => (\n  <>\n    {contactsItems.map(({ id, name, number }) => {\n      return (\n        <li key={id} className={s.item}>\n          <p className={s.itemName}>{`${name}: ${number}`}</p>\n          <button type=\"button\" onClick={() => onDeleteContact(id)} className={s.button}>\n            Delete\n          </button>\n        </li>\n      );\n    })}\n  </>\n);\n\n\nconst getCurrentContacts = (allContacts, filter) => {\n  const regExp = new RegExp(filter, 'gi');\n\n  if (filter) {\n    return allContacts.filter(contact => regExp.test(contact.name));\n  }\n  return allContacts;\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contactsItems: getCurrentContacts(items, filter),\n});\n\nconst mapDispatchFromProps = dispatch => ({\n  onDeleteContact: id => dispatch(actions.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchFromProps)(ContactItem);\n\nContactItem.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onDeleteContact: PropTypes.func,\n};\n","import { connect } from 'react-redux';\nimport * as actions from '../../redux/actions';\nimport s from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={s.formNameTitle }>\n    Find contacts by name\n    <input type=\"text\" value={value} onChange={onChange} className={s.formNameInput}></input>\n  </label>\n);\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchFromProps = dispatch => ({\n  onChange: event => dispatch(actions.changeFilter(event.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchFromProps)(Filter);","import React from 'react';\nimport { connect } from 'react-redux';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport PhoneBook from './components/PhoneBook/PhoneBook';\nimport Filter from './components/Filter/Filter';\nimport s from './App.module.css';\n\nfunction App({ items }) {\n\n  return (\n    <>\n      <h1 className={s.title}>Phonebook</h1>\n      <ContactForm />\n      <h2 className={s.title}>Contacts</h2>\n\n      {items.length > 0 ? (\n        <>\n          <Filter />\n          <ContactList>\n            <PhoneBook />\n          </ContactList>\n        </>\n      ) : (\n        <span className={s.subTitle}>You have no contacts!</span>\n      )}\n    </>\n  )\n};\n\nconst mapStateToProps = state => ({\n  items: state.contacts.items,\n});\n\nexport default connect(mapStateToProps)(App);","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport * as actions from './actions';\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(item => item.id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});","import { configureStore, getDefaultMiddleware, } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n// eslint-disable-next-line\r\nexport default { store, persistor };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport style from './index.module.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App className={style}/>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContact\":\"ContactForm_formContact__h626v\",\"formNameTitle\":\"ContactForm_formNameTitle__2rBPT\",\"formNameInput\":\"ContactForm_formNameInput__1-Itc\",\"button\":\"ContactForm_button__2x54Z\"};"],"sourceRoot":""}